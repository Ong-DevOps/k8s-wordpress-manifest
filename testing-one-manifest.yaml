## mySQL
---
apiVersion: v1
kind: Secret
metadata:
  name: wp-db-secrets
  namespace: devops # Update this with your new namespace

type: Opaque

data:
  # This is base64 encoded -- the real password is NGiJi6A46YJTjTx
  MYSQL_ROOT_PASSWORD: TkdpSmk2QTQ2WUpUalR4

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-volume
  namespace: devops # Update this with your new namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: do-block-storage

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: devops # Update this with your new namespace
data:
  init-db.sql: |
    CREATE DATABASE IF NOT EXISTS wordpress;

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mysql
  namespace: devops # Update this with your new namespace
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: database
        image: mysql:5.7
        resources:
          limits:
            memory: 512Mi
          requests:
            memory: 256Mi
        args:
          - "--ignore-db-dir=lost+found"
        envFrom:
          - secretRef:
              name: wp-db-secrets
        livenessProbe:
          tcpSocket:
            port: 3306
        ports:
          - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: init-db
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-volume
      - name: init-db
        configMap:
          name: mysql-initdb-config

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: devops # Update this with your new namespace
spec:
  ports:
  - port: 3306
    protocol: TCP
  selector:
    app: mysql

## wordpress and SSL
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-volume
  namespace: devops # Update this with your new namespace
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: do-block-storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: devops # Update this with your new namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:5-php7.1-apache
          ports:
          - containerPort: 80
            name: wordpress
          volumeMounts:
            - name: wordpress-data
              mountPath: /var/www
          env:
            # Annoyingly repetitive -- envFrom: is a nicer way to do this with a ConfigMap or Secret
            - name: WORDPRESS_DB_HOST
              value: mysql.devops.svc.cluster.local # Update this with your new namespace
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: wp-db-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: WORDPRESS_DB_USER
              value: root
            - name: WORDPRESS_DB_NAME
              value: wordpress
      volumes:
        - name: wordpress-data
          persistentVolumeClaim:
            claimName: wordpress-volume

---
kind: Service
apiVersion: v1
metadata:
  name: wordpress
  namespace: devops # Update this with your new namespace
spec:
  type: ClusterIP
  selector:
    app: wordpress
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80

# ---
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer # I'm using ClusterIssuer here
# metadata:
#   name: letsencrypt-cluster-issuer
# spec:
#   acme:
#     server: https://acme-v02.api.letsencrypt.org/directory
#     email: smtp.testing.devops@gmail.com
#     privateKeySecretRef:
#       name: letsencrypt-cluster-issuer-key
#     solvers:
#     - http01:
#         ingress:
#           class: nginx

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: wordpress-ingress
  namespace: devops # Update this with your new namespace
spec:
  dnsNames:
    - devops.ddns.net # Update this with your new domain
  secretName: nginx-wordpress-tls
  issuerRef:
    name: letsencrypt-cluster-issuer
    kind: ClusterIssuer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
  namespace: devops # Update this with your new namespace
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
    cert-manager.io/renew-before: 360h  # 15 days before expiration
    # kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  - host: devops.ddns.net # Update this with your new domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wordpress
            port:
              number: 80
  tls:
  - hosts:
    - devops.ddns.net # Update this with your new domain
    secretName: nginx-wordpress-tls
